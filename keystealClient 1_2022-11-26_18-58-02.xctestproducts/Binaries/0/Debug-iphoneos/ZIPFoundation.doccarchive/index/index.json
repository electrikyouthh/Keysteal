{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/archive\/init(data:accessmode:preferredencoding:)","title":"init?(data: Data, accessMode: AccessMode, preferredEncoding: String.Encoding?)","type":"init"},{"path":"\/documentation\/zipfoundation\/archive\/init(url:accessmode:preferredencoding:)","title":"init?(url: URL, accessMode: AccessMode, preferredEncoding: String.Encoding?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/archive\/accessmode-swift.property","title":"let accessMode: AccessMode","type":"property"},{"path":"\/documentation\/zipfoundation\/archive\/data","title":"var data: Data?","type":"property"},{"path":"\/documentation\/zipfoundation\/archive\/url","title":"let url: URL","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/archive\/addentry(with:fileurl:compressionmethod:buffersize:progress:)-28a4c","title":"func addEntry(with: String, fileURL: URL, compressionMethod: CompressionMethod, bufferSize: Int, progress: Progress?) throws","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/addentry(with:fileurl:compressionmethod:buffersize:progress:)-3ttui","title":"func addEntry(with: String, fileURL: URL, compressionMethod: CompressionMethod, bufferSize: UInt32, progress: Progress?) throws","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/addentry(with:relativeto:compressionmethod:buffersize:progress:)-5vbcj","title":"func addEntry(with: String, relativeTo: URL, compressionMethod: CompressionMethod, bufferSize: UInt32, progress: Progress?) throws","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/addentry(with:relativeto:compressionmethod:buffersize:progress:)-7g0b7","title":"func addEntry(with: String, relativeTo: URL, compressionMethod: CompressionMethod, bufferSize: Int, progress: Progress?) throws","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/addentry(with:type:uncompressedsize:modificationdate:permissions:compressionmethod:buffersize:progress:provider:)-2u23e","title":"func addEntry(with: String, type: Entry.EntryType, uncompressedSize: UInt32, modificationDate: Date, permissions: UInt16?, compressionMethod: CompressionMethod, bufferSize: Int, progress: Progress?, provider: (_ position: Int, _ size: Int) throws -> Data) throws","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/addentry(with:type:uncompressedsize:modificationdate:permissions:compressionmethod:buffersize:progress:provider:)-52rar","title":"func addEntry(with: String, type: Entry.EntryType, uncompressedSize: Int64, modificationDate: Date, permissions: UInt16?, compressionMethod: CompressionMethod, bufferSize: Int, progress: Progress?, provider: Provider) throws","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/extract(_:buffersize:skipcrc32:progress:consumer:)-3jw4n","title":"func extract(Entry, bufferSize: UInt32, skipCRC32: Bool, progress: Progress?, consumer: Consumer) throws -> CRC32","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/extract(_:buffersize:skipcrc32:progress:consumer:)-8wv1o","title":"func extract(Entry, bufferSize: Int, skipCRC32: Bool, progress: Progress?, consumer: Consumer) throws -> CRC32","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/extract(_:to:buffersize:skipcrc32:progress:)-41sor","title":"func extract(Entry, to: URL, bufferSize: Int, skipCRC32: Bool, progress: Progress?) throws -> CRC32","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/extract(_:to:buffersize:skipcrc32:progress:)-4mt23","title":"func extract(Entry, to: URL, bufferSize: UInt32, skipCRC32: Bool, progress: Progress?) throws -> CRC32","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/makeiterator()","title":"func makeIterator() -> AnyIterator<Entry>","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/remove(_:buffersize:progress:)-4l173","title":"func remove(Entry, bufferSize: Int, progress: Progress?) throws","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/remove(_:buffersize:progress:)-6y7fo","title":"func remove(Entry, bufferSize: UInt32, progress: Progress?) throws","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/totalunitcountforaddingitem(at:)","title":"func totalUnitCountForAddingItem(at: URL) -> Int64","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/totalunitcountforreading(_:)","title":"func totalUnitCountForReading(Entry) -> Int64","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/totalunitcountforremoving(_:)","title":"func totalUnitCountForRemoving(Entry) -> Int64","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/archive\/subscript(_:)","title":"subscript(String) -> Entry?","type":"subscript"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/archive\/accessmode-swift.enum\/create","title":"case create","type":"case"},{"path":"\/documentation\/zipfoundation\/archive\/accessmode-swift.enum\/read","title":"case read","type":"case"},{"path":"\/documentation\/zipfoundation\/archive\/accessmode-swift.enum\/update","title":"case update","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/archive\/accessmode-swift.enum\/init(rawvalue:)","title":"init?(rawValue: UInt)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/archive\/accessmode-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/zipfoundation\/archive\/accessmode-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/archive\/accessmode-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/archive\/accessmode-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/zipfoundation\/archive\/accessmode-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/zipfoundation\/archive\/accessmode-swift.enum","title":"Archive.AccessMode","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/cancelledoperation","title":"case cancelledOperation","type":"case"},{"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/invalidbuffersize","title":"case invalidBufferSize","type":"case"},{"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/invalidcrc32","title":"case invalidCRC32","type":"case"},{"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/invalidcentraldirectoryentrycount","title":"case invalidCentralDirectoryEntryCount","type":"case"},{"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/invalidcentraldirectoryoffset","title":"case invalidCentralDirectoryOffset","type":"case"},{"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/invalidcentraldirectorysize","title":"case invalidCentralDirectorySize","type":"case"},{"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/invalidcompressionmethod","title":"case invalidCompressionMethod","type":"case"},{"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/invalidentrypath","title":"case invalidEntryPath","type":"case"},{"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/invalidentrysize","title":"case invalidEntrySize","type":"case"},{"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/invalidlocalheaderdataoffset","title":"case invalidLocalHeaderDataOffset","type":"case"},{"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/invalidlocalheadersize","title":"case invalidLocalHeaderSize","type":"case"},{"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/missingendofcentraldirectoryrecord","title":"case missingEndOfCentralDirectoryRecord","type":"case"},{"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/unreadablearchive","title":"case unreadableArchive","type":"case"},{"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/unwritablearchive","title":"case unwritableArchive","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/zipfoundation\/archive\/archiveerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/zipfoundation\/archive\/archiveerror","title":"Archive.ArchiveError","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/archive\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/zipfoundation\/archive\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/zipfoundation\/archive\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/archive\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/flatmap(_:)-1fn9o","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/flatmap(_:)-3ycg0","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/map(_:)","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/sorted(using:)-5j925","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/sorted(using:)-8rhjt","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/zipfoundation\/archive\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/zipfoundation\/archive\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/zipfoundation\/archive","title":"Archive","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/entry\/==(_:_:)","title":"static func == (Entry, Entry) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/entry\/checksum","title":"var checksum: CRC32","type":"property"},{"path":"\/documentation\/zipfoundation\/entry\/compressedsize","title":"var compressedSize: UInt64","type":"property"},{"path":"\/documentation\/zipfoundation\/entry\/fileattributes","title":"var fileAttributes: [FileAttributeKey : Any]","type":"property"},{"path":"\/documentation\/zipfoundation\/entry\/path","title":"var path: String","type":"property"},{"path":"\/documentation\/zipfoundation\/entry\/type","title":"var type: EntryType","type":"property"},{"path":"\/documentation\/zipfoundation\/entry\/uncompressedsize","title":"var uncompressedSize: UInt64","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/entry\/path(using:)","title":"func path(using: String.Encoding) -> String","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/entry\/entrytype\/directory","title":"case directory","type":"case"},{"path":"\/documentation\/zipfoundation\/entry\/entrytype\/file","title":"case file","type":"case"},{"path":"\/documentation\/zipfoundation\/entry\/entrytype\/symlink","title":"case symlink","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/entry\/entrytype\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/entry\/entrytype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/zipfoundation\/entry\/entrytype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/entry\/entrytype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/entry\/entrytype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/zipfoundation\/entry\/entrytype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/zipfoundation\/entry\/entrytype","title":"Entry.EntryType","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/entry\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/zipfoundation\/entry\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/zipfoundation\/entry","title":"Entry","type":"struct"},{"title":"Variables","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/defaultdirectorypermissions","title":"let defaultDirectoryPermissions: UInt16","type":"var"},{"path":"\/documentation\/zipfoundation\/defaultfilepermissions","title":"let defaultFilePermissions: UInt16","type":"var"},{"path":"\/documentation\/zipfoundation\/defaultreadchunksize","title":"let defaultReadChunkSize: Int","type":"var"},{"path":"\/documentation\/zipfoundation\/defaultwritechunksize","title":"let defaultWriteChunkSize: Int","type":"var"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/crc32","title":"CRC32","type":"typealias"},{"path":"\/documentation\/zipfoundation\/consumer","title":"Consumer","type":"typealias"},{"path":"\/documentation\/zipfoundation\/filepointer","title":"FILEPointer","type":"typealias"},{"path":"\/documentation\/zipfoundation\/provider","title":"Provider","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/compressionmethod\/deflate","title":"case deflate","type":"case"},{"path":"\/documentation\/zipfoundation\/compressionmethod\/none","title":"case none","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/compressionmethod\/init(rawvalue:)","title":"init?(rawValue: UInt16)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/compressionmethod\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/zipfoundation\/compressionmethod\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/compressionmethod\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/zipfoundation\/compressionmethod\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/zipfoundation\/compressionmethod\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/zipfoundation\/compressionmethod","title":"CompressionMethod","type":"enum"}],"path":"\/documentation\/zipfoundation","title":"ZIPFoundation","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}